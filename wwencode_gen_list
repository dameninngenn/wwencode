#!/usr/bin/perl

use strict;
no warnings;
use Dumpvalue;

my @base_num  = (10,11,12,13,14,15,16,17,18,19,20);
my %base_hash;
$base_hash{10} = 'length q wWWWWW WWWWw ';
$base_hash{11} = 'length q wWWWWW WWWWWw ';
$base_hash{12} = 'length q wWWWWW WWWWWWw ';
$base_hash{13} = 'length q Wwwwwww wwwwwwW ';
$base_hash{14} = 'length q Wwwwww w wwwwwwW ';
$base_hash{15} = 'length q Wwwwww ww wwwwwwW ';
$base_hash{16} = 'length q wWWWWW WWW WWWWWWw ';
$base_hash{17} = 'length q wWWWWW WWWW WWWWWWw ';
$base_hash{18} = 'length q wWWWWW WWWWW WWWWWWw ';
$base_hash{19} = 'length q Wwwwww wwwwww wwwwwwW ';
$base_hash{20} = 'length q Wwwwww wwwwwww wwwwwwW ';

sub get_min_token {
    my $token_list = shift;
    my $min_length;
    my $min_key;
    my $result_token;

    foreach my $key (keys %$token_list) {
        foreach (@{$token_list->{$key}}) {
            unless($min_length) {
                $min_length = length($_);
                $min_key = $key;
                $result_token = $_.$base_hash{$key};
            }
            if($min_length > length($_)) {
                $min_length = length($_);
                $min_key = $key;
                $result_token = $_.$base_hash{$key};
            }
        }
    }

    return $result_token;
}

sub oct_hex {
    my $org_num         = shift;
    my $hope_num        = shift;
    my $result_array    = shift;
    my $r_max           = shift;
    my $result_str_org  = shift || undef;
    my $r_num           = shift || 0;
    my $result_num_hex;
    my $result_num_oct;

    $r_num += 1;

    # hex
    my $result_str_hex = 'hex '.$result_str_org;
    eval{
        $result_num_hex = hex($org_num);
    };

    if($result_num_hex eq $hope_num) {
        push(@$result_array,$result_str_hex);
        return $result_array;
    }

    # oct
    my $result_str_oct = 'oct '.$result_str_org;
    eval{
        $result_num_oct = oct($org_num);
    };

    if($result_num_oct eq $hope_num) {
        push(@$result_array,$result_str_oct);
        return $result_array;
    }

    if ($r_num > $r_max) {
        return $result_array;
    }
    $result_array = oct_hex(
        $result_num_hex,
        $hope_num,
        $result_array,
        $r_max,
        $result_str_hex,
        $r_num
    );
    $result_array = oct_hex(
        $result_num_oct,
        $hope_num,
        $result_array,
        $r_max,
        $result_str_oct,
        $r_num
    );

    return $result_array;
}

sub get_hex_oct {
    my $character = shift;
    my $r_max     = 10;
    my $loop;
    my %result;

    while(!$loop) {
        foreach (@base_num) {
            my @result_array;
            $result{$_} = oct_hex($_,$character,\@result_array,$r_max);
            $loop = @result_array;
        }
        $r_max += 5;
    }

    my $min_token = get_min_token(\%result); 

    return $min_token;
}

sub wwencode {
    my $text = shift;
    my $r = "";
    my $code;
    #for (my $i = 0; $i < length($text); $i++) {
        #my $code = get_hex_oct(ord(substr($text, $i, 1)));
        $code = get_hex_oct($text);
        if ($code ne '') {
            #$r .= 'and print chr ' . $code;
        }
    #}
    #return $r;
    return $code;
}

#print "#!/usr/bin/perl\n";
#print "WWwwWW WWww wWwww wwwWWWw W wWWWWW WWWWWWw ";
#while (my $line = <>) {
#    print wwencode($line);
#}
for (0..127) {
    print "    ".$_." => '".wwencode($_)."',";
    print "\n";
}
#print "and WWwwWW WWww wWwww wwwWWWw W wWWWWW WWWWWWw";
print "\n";

1;

